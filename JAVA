class Solution {
    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->(a.getKey()-b.getKey()));
        for(int i=0;i<profit.length;i++)
        pq.add(new Pair(difficulty[i],profit[i]));
        Arrays.sort(worker);
        int max=0,ind=0,sol=0;
        while(ind<worker.length &&!pq.isEmpty())
        {
            if(worker[ind]>=pq.peek().getKey())
            {
                max=Math.max(pq.peek().getValue(),max);
                pq.poll();
            }
            else
            {
                sol+=max;
                ind++;
            }
        }
        while(ind<worker.length)
        {
            sol+=max;
            ind++;
        }
        return sol;
    }
    class Pair
    {
        int key;
        int val;
        Pair(int key,int val)
        {
            this.key=key;
            this.val=val;
        }
        public int getKey(){
            return key;
        }
        public int getValue(){
            return val;
        }
    }
}
